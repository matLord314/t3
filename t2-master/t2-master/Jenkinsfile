pipeline {
    agent any

    environment {
        GIT_CREDENTIALS_ID = '1'
        registryCredential = 'dockerhub-credentials-id'
    }

    stages {
        stage('Clonar Repositorio') {
            steps {
                git url: 'https://github.com/matLord314/t3.git', credentialsId: env.GIT_CREDENTIALS_ID
            }
        }

        stage('Construir Imágenes Docker') {
            parallel {
                stage('Construir Imagen w1') {
                    steps {
                        script {
                            docker.build('w1_image_jenkin_kub', './t2-master/t2-master/w1')
                        }
                    }
                }
                stage('Construir Imagen w2') {
                    steps {
                        script {
                            docker.build('w2_image_jenkin_kub', './t2-master/t2-master/w2')
                        }
                    }
                }
                stage('Construir Imagen Reverse Proxy') {
                    steps {
                        script {
                            docker.build('rp_image_jenkin_kub', './t2-master/t2-master/rprr')
                        }
                    }
                }
            }
        }

        stage('Subir Imágenes Docker') {
            steps {
                script {
                    def tag = "stable-${env.BUILD_ID}"
                    withCredentials([usernamePassword(credentialsId: env.registryCredential, passwordVariable: 'DOCKERHUB_PWD', usernameVariable: 'DOCKERHUB_USER')]) {
                        docker.withRegistry('https://index.docker.io/v1/', env.registryCredential) {
                            sh "docker login -u ${DOCKERHUB_USER} -p ${DOCKERHUB_PWD}"
                        
                            sh "docker tag w1_image_jenkin_kub:latest matlord/w1_image_jenkin_kub:${tag}"
                            sh "docker tag w2_image_jenkin_kub:latest matlord/w2_image_jenkin_kub:${tag}"
                            sh "docker tag rp_image_jenkin_kub:latest matlord/rp_image_jenkin_kub:${tag}"

                            sh "docker push matlord/w1_image_jenkin_kub:${tag}"
                            sh "docker push matlord/w2_image_jenkin_kub:${tag}"
                            sh "docker push matlord/rp_image_jenkin_kub:${tag}"
                        }
                    }
                }
            }
        }

        stage('Actualizar y Desplegar en Kubernetes') {
            steps {
                script {
                    def yamlPath = '/tmp/config-copy'
                    def tag = "stable-${env.BUILD_ID}"

                    sh "ls -l ${yamlPath}"

                    sh "sed -i 's|image: .*w1_image_jenkin:.*|image: matlord/w1_image_jenkin_kub:${tag}|' ${yamlPath}/w1-deployment.yaml"
                    sh "sed -i 's|image: .*w2_image_jenkin:.*|image: matlord/w2_image_jenkin_kub:${tag}|' ${yamlPath}/w2-deployment.yaml"
                    sh "sed -i 's|image: .*rp_image_jenkin:.*|image: matlord/rp_image_jenkin_kub:${tag}|' ${yamlPath}/rprr-deployment.yaml"

                    sh "kubectl apply -f ${yamlPath}/w1-deployment.yaml"
                    sh "kubectl apply -f ${yamlPath}/w2-deployment.yaml"
                    sh "kubectl apply -f ${yamlPath}/rprr-deployment.yaml"
                }
            }
        }
    }

    post {
        success {
            echo 'Deployment successful!'
        }
        failure {
            echo 'Deployment failed!'
        }
    }
}
