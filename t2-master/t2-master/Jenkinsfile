pipeline {
    agent any

    environment {
        GIT_CREDENTIALS_ID = '1' // Reemplaza con el ID de las credenciales que creaste en Jenkins
        DOCKERHUB_CREDENTIALS = credentials('3') // Reemplaza con el ID de las credenciales de DockerHub
        KUBECONFIG = credentials('2') // Reemplaza con el ID de las credenciales del kubeconfig en Jenkins
    }

    stages {
        stage('Clonar Repositorio') {
            steps {
                // Clonar el repositorio de GitHub donde tienes tus archivos de configuración
                git url: 'https://github.com/matLord314/t2.git', credentialsId: env.GIT_CREDENTIALS_ID
            }
        }

        stage('Construir Imágenes Docker') {
            parallel {
                stage('Construir Imagen w1') {
                    steps {
                        script {
                            // Construir la imagen Docker para w1
                            docker.build('w1_image_jenkin', './w1')
                        }
                    }
                }
                stage('Construir Imagen w2') {
                    steps {
                        script {
                            // Construir la imagen Docker para w2
                            docker.build('w2_image_jenkin', './w2')
                        }
                    }
                }
                stage('Construir Imagen Reverse Proxy') {
                    steps {
                        script {
                            // Construir la imagen Docker para el reverse proxy
                            docker.build('rp_image_jenkin', './rprr')
                        }
                    }
                }
            }
        }

        stage('Subir Imágenes Docker') {
            steps {
                script {
                    docker.withRegistry('https://index.docker.io/v1/', env.DOCKERHUB_CREDENTIALS) {
                        sh "docker tag w1_image_jenkin:latest matlord/w1_image_jenkin:latest"
                        sh "docker tag w2_image_jenkin:latest matlord/w2_image_jenkin:latest"
                        sh "docker tag rp_image_jenkin:latest matlord/rp_image_jenkin:latest"

                        sh "docker push matlord/w1_image_jenkin:latest"
                        sh "docker push matlord/w2_image_jenkin:latest"
                        sh "docker push matlord/rp_image_jenkin:latest"
                    }
                }
            }
        }

        stage('Actualizar y Desplegar en Kubernetes') {
            steps {
                script {
                    def yamlPath = '/home/matias.diaz/jenkins/manifiestos' // Ruta en la máquina del clúster donde están los archivos YAML

                    // Actualizar las imágenes en los archivos YAML
                    sh "sed -i 's|image: .*w1_image_jenkin:.*|image: matlord/w1_image_jenkin:latest|' ${yamlPath}/w1-deployment.yaml"
                    sh "sed -i 's|image: .*w2_image_jenkin:.*|image: matlord/w2_image_jenkin:latest|' ${yamlPath}/w2-deployment.yaml"
                    sh "sed -i 's|image: .*rp_image_jenkin:.*|image: matlord/rp_image_jenkin:latest|' ${yamlPath}/rprr-deployment.yaml"

                    // Aplicar los archivos YAML en el clúster de Kubernetes
                    sh "kubectl apply -f ${yamlPath}/w1-deployment.yaml"
                    sh "kubectl apply -f ${yamlPath}/w2-deployment.yaml"
                    sh "kubectl apply -f ${yamlPath}/rprr-deployment.yaml"
                }
            }
        }
    }

    post {
        success {
            echo 'Deployment successful!'
        }
        failure {
            echo 'Deployment failed!'
        }
    }
}
